--
-- Script was generated by Devart dbForge Studio for SQL Server, Version 6.6.5.0
-- Product home page: http://www.devart.com/dbforge/sql/studio
-- Script date 9/24/2024 12:37:03 AM
-- Server version: 16.00.1000
--


SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO

USE HIS
GO

IF DB_NAME() <> N'HIS' SET NOEXEC ON
GO

--
-- Create full-text catalog [fulltext_user]
--
PRINT (N'Create full-text catalog [fulltext_user]')
GO
CREATE FULLTEXT CATALOG fulltext_user
  AS DEFAULT
GO

--
-- Create table [dbo].[Hospital]
--
PRINT (N'Create table [dbo].[Hospital]')
GO
CREATE TABLE dbo.Hospital (
  HospitalID int IDENTITY,
  HospitalName nvarchar(30) NULL,
  Addres nvarchar(150) NULL,
  PhoneNumber nvarchar(20) NULL,
  PRIMARY KEY CLUSTERED (HospitalID)
)
ON tableFG
GO

--
-- Create index [IDX_Hospital_HospitalName] on table [dbo].[Hospital]
--
PRINT (N'Create index [IDX_Hospital_HospitalName] on table [dbo].[Hospital]')
GO
CREATE INDEX IDX_Hospital_HospitalName
  ON dbo.Hospital (HospitalName)
  ON tableFG
GO

--
-- Create full-text index on table [dbo].[Hospital]
--
PRINT (N'Create full-text index on table [dbo].[Hospital]')
GO
CREATE FULLTEXT INDEX
  ON dbo.Hospital(Addres LANGUAGE 1033)
  KEY INDEX PK__Hospital__38C2E58F287A7A82
  ON (FILEGROUP tableFG, fulltext_user)
  WITH CHANGE_TRACKING AUTO, STOPLIST SYSTEM
GO

--
-- Create table [dbo].[VisitSchedule]
--
PRINT (N'Create table [dbo].[VisitSchedule]')
GO
CREATE TABLE dbo.VisitSchedule (
  VisitScheduleID int IDENTITY,
  DoctorID int NULL,
  DepartmentID int NULL,
  DayofWeek nvarchar(50) NULL,
  StartTime time NULL,
  EndTime time NULL,
  PRIMARY KEY CLUSTERED (VisitScheduleID)
)
ON tableFG
GO

--
-- Create index [IDX_VisitSchedule] on table [dbo].[VisitSchedule]
--
PRINT (N'Create index [IDX_VisitSchedule] on table [dbo].[VisitSchedule]')
GO
CREATE INDEX IDX_VisitSchedule
  ON dbo.VisitSchedule (DoctorID, DepartmentID)
  ON tableFG
GO

--
-- Create table [dbo].[Visits]
--
PRINT (N'Create table [dbo].[Visits]')
GO
CREATE TABLE dbo.Visits (
  VisitsID int IDENTITY,
  PatinentID int NULL,
  DoctorID int NULL,
  DepartmentID int NULL,
  VisitsDate datetime NULL,
  Diagnosis nvarchar(200) NULL,
  Prescription nvarchar(200) NULL,
  PRIMARY KEY CLUSTERED (VisitsID)
)
ON tableFG
GO

--
-- Create index [IDX_Visits] on table [dbo].[Visits]
--
PRINT (N'Create index [IDX_Visits] on table [dbo].[Visits]')
GO
CREATE INDEX IDX_Visits
  ON dbo.Visits (PatinentID, DoctorID, DepartmentID)
  ON tableFG
GO

--
-- Create table [dbo].[Users]
--
PRINT (N'Create table [dbo].[Users]')
GO
CREATE TABLE dbo.Users (
  UsersID int IDENTITY,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  LoginName nvarchar(30) NULL,
  HashPassword nvarchar(50) NULL,
  Email nvarchar(30) NULL,
  Phonenumber nvarchar(30) NULL,
  Address nvarchar(100) NULL,
  IsActive bit NULL,
  Deleted bit NULL DEFAULT (0),
  PRIMARY KEY CLUSTERED (UsersID)
)
ON tableFG
GO

--
-- Create index [IDX_Users] on table [dbo].[Users]
--
PRINT (N'Create index [IDX_Users] on table [dbo].[Users]')
GO
CREATE INDEX IDX_Users
  ON dbo.Users (FirstName, LastName, LoginName, Phonenumber)
  ON tableFG
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter procedure [dbo].[PRC_Users_INS]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Users_INS]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Users_INS
  @FirstName NVARCHAR(30),
  @LastName NVARCHAR(30),
  @LoginName NVARCHAR(30),
  @HashPassword NVARCHAR(50),
  @Email NVARCHAR(30),
  @Phonenumber NVARCHAR(30),
  @Address NVARCHAR(100),
  @IsActive bit,
  @Deleted BIT
AS
INSERT INTO Users (FirstName, LastName, LoginName, HashPassword, Email, Phonenumber, Address, IsActive, Deleted)
  VALUES (@FirstName, @LastName, @LoginName, @HashPassword, @Email, @Phonenumber, @Address, 0, DEFAULT);
GO

--
-- Create or alter procedure [dbo].[PRC_Users_Del]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Users_Del]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Users_Del
  @UserID INT
  AS
    UPDATE Users SET Deleted=1
    WHERE UsersID=@UserID
GO

--
-- Create table [dbo].[UserLog]
--
PRINT (N'Create table [dbo].[UserLog]')
GO
CREATE TABLE dbo.UserLog (
  UserLog int IDENTITY,
  UsersID int NULL,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  LoginName nvarchar(30) NULL,
  HashPassword nvarchar(50) NULL,
  Email nvarchar(30) NULL,
  Phonenumber nvarchar(30) NULL,
  Address nvarchar(100) NULL,
  DELETED bit NULL,
  Updated datetime NULL DEFAULT (getdate()),
  ClientIP varchar(20) NULL,
  PRIMARY KEY CLUSTERED (UserLog)
)
ON tableFG
GO

--
-- Create index [IDX_UserLog] on table [dbo].[UserLog]
--
PRINT (N'Create index [IDX_UserLog] on table [dbo].[UserLog]')
GO
CREATE INDEX IDX_UserLog
  ON dbo.UserLog (UsersID, FirstName, LastName, Phonenumber, LoginName)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_Users_Update]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Users_Update]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Users_Update
  @UserID INT,
  @FirstName NVARCHAR(30),
  @LastName NVARCHAR(30),
  @LoginName NVARCHAR(30),
  @HashPassword NVARCHAR(50),
  @Email NVARCHAR(30),
  @Phonenumber NVARCHAR(30),
  @Address NVARCHAR(100)
  AS

UPDATE Users 
SET FirstName = @FirstName
   ,LastName = @LastName
   ,LoginName = @LoginName
   ,HashPassword = @HashPassword
   ,Email = @Email
   ,Phonenumber = @Phonenumber
   ,Address = @Address
   
WHERE UsersID = @UserID;

DECLARE @GetIP VARCHAR(15)
SELECT @GetIP=CONVERT(VARCHAR,CONNECTIONPROPERTY('client_net_address'))

INSERT INTO UserLog (UsersID, FirstName, LastName, LoginName, HashPassword, Email, Phonenumber, Address, DELETED, Updated, ClientIP)
  VALUES (@UserID, @FirstName, @LastName, @LoginName, @HashPassword, @Email, @Phonenumber, @Address, 0, DEFAULT, @GetIP);
GO

--
-- Create table [dbo].[Tests]
--
PRINT (N'Create table [dbo].[Tests]')
GO
CREATE TABLE dbo.Tests (
  TestID int IDENTITY,
  TestName nvarchar(100) NULL,
  Description nvarchar(200) NULL,
  Price decimal(18, 2) NULL,
  PRIMARY KEY CLUSTERED (TestID)
)
ON tableFG
GO

--
-- Create index [IDX_Tests_TestName] on table [dbo].[Tests]
--
PRINT (N'Create index [IDX_Tests_TestName] on table [dbo].[Tests]')
GO
CREATE INDEX IDX_Tests_TestName
  ON dbo.Tests (TestName)
  ON tableFG
GO

--
-- Create table [dbo].[TestResult]
--
PRINT (N'Create table [dbo].[TestResult]')
GO
CREATE TABLE dbo.TestResult (
  TestResultID int IDENTITY,
  TestID int NULL,
  PatinentID int NULL,
  ResultDetails nvarchar(200) NULL,
  CreatDate datetime NULL,
  VisitsID int NULL,
  DoctorID int NULL,
  PRIMARY KEY CLUSTERED (TestResultID)
)
ON tableFG
GO

--
-- Create index [IDX_TestResult] on table [dbo].[TestResult]
--
PRINT (N'Create index [IDX_TestResult] on table [dbo].[TestResult]')
GO
CREATE INDEX IDX_TestResult
  ON dbo.TestResult (TestID, PatinentID, DoctorID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_GetTestResultByDoctor]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_GetTestResultByDoctor]')
GO
CREATE OR ALTER   PROC dbo.PRC_GetTestResultByDoctor
@DoctorID INT
AS	
	BEGIN
    	SELECT tr.TestID, tr.PatinentID, tr.ResultDetails FROM TestResult tr
		WHERE tr.DoctorID = @DoctorID
    END
GO

--
-- Create table [dbo].[StaffFeedback]
--
PRINT (N'Create table [dbo].[StaffFeedback]')
GO
CREATE TABLE dbo.StaffFeedback (
  StaffFeedbackID int IDENTITY,
  StaffID int NULL,
  FeedbackText nvarchar(200) NULL,
  FeedbackDate datetime NULL,
  PRIMARY KEY CLUSTERED (StaffFeedbackID)
)
ON tableFG
GO

--
-- Create index [IDX_StaffFeedback] on table [dbo].[StaffFeedback]
--
PRINT (N'Create index [IDX_StaffFeedback] on table [dbo].[StaffFeedback]')
GO
CREATE INDEX IDX_StaffFeedback
  ON dbo.StaffFeedback (StaffID, FeedbackDate)
  ON tableFG
GO

--
-- Create table [dbo].[StaffBox]
--
PRINT (N'Create table [dbo].[StaffBox]')
GO
CREATE TABLE dbo.StaffBox (
  StaffBoxID int IDENTITY,
  massage nvarchar(200) NULL,
  SendDate datetime NULL,
  IsRead bit NULL,
  StaffID int NULL,
  PRIMARY KEY CLUSTERED (StaffBoxID)
)
ON tableFG
GO

--
-- Create index [IDX_StaffBox] on table [dbo].[StaffBox]
--
PRINT (N'Create index [IDX_StaffBox] on table [dbo].[StaffBox]')
GO
CREATE INDEX IDX_StaffBox
  ON dbo.StaffBox (StaffID, SendDate)
  ON tableFG
GO

--
-- Create index [IDX_StaffBox2] on table [dbo].[StaffBox]
--
PRINT (N'Create index [IDX_StaffBox2] on table [dbo].[StaffBox]')
GO
CREATE INDEX IDX_StaffBox2
  ON dbo.StaffBox (StaffID, SendDate)
  ON tableFG
GO

--
-- Create table [dbo].[Staff]
--
PRINT (N'Create table [dbo].[Staff]')
GO
CREATE TABLE dbo.Staff (
  StaffID int IDENTITY,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  Position nvarchar(30) NULL,
  DepartmentID int NULL,
  email nvarchar(30) NULL,
  HireDate datetime NULL,
  PRIMARY KEY CLUSTERED (StaffID)
)
ON tableFG
GO

--
-- Create index [IDX_Staff] on table [dbo].[Staff]
--
PRINT (N'Create index [IDX_Staff] on table [dbo].[Staff]')
GO
CREATE INDEX IDX_Staff
  ON dbo.Staff (FirstName, LastName, DepartmentID)
  ON tableFG
GO

--
-- Create table [dbo].[SpecialReport]
--
PRINT (N'Create table [dbo].[SpecialReport]')
GO
CREATE TABLE dbo.SpecialReport (
  SpicialReportID int IDENTITY,
  patinentID int NULL,
  ReportType nvarchar(200) NULL,
  ReportDate datetime NULL,
  ReportContent nvarchar(300) NULL,
  PRIMARY KEY CLUSTERED (SpicialReportID)
)
ON tableFG
GO

--
-- Create index [IDX_SpecialReport] on table [dbo].[SpecialReport]
--
PRINT (N'Create index [IDX_SpecialReport] on table [dbo].[SpecialReport]')
GO
CREATE INDEX IDX_SpecialReport
  ON dbo.SpecialReport (patinentID, ReportDate)
  ON tableFG
GO

--
-- Create table [dbo].[Roles]
--
PRINT (N'Create table [dbo].[Roles]')
GO
CREATE TABLE dbo.Roles (
  RolesID int IDENTITY,
  RolesName nvarchar(30) NULL,
  PRIMARY KEY CLUSTERED (RolesID)
)
ON tableFG
GO

--
-- Create index [IDX_Roles_RolesName] on table [dbo].[Roles]
--
PRINT (N'Create index [IDX_Roles_RolesName] on table [dbo].[Roles]')
GO
CREATE INDEX IDX_Roles_RolesName
  ON dbo.Roles (RolesName)
  ON tableFG
GO

--
-- Create table [dbo].[PatinentFeedback]
--
PRINT (N'Create table [dbo].[PatinentFeedback]')
GO
CREATE TABLE dbo.PatinentFeedback (
  PatinentFeedbackID int IDENTITY,
  FeedbackText nvarchar(300) NULL,
  PatinentID int NULL,
  FeedbackDate datetime NULL,
  PRIMARY KEY CLUSTERED (PatinentFeedbackID)
)
ON tableFG
GO

--
-- Create index [IDX_PatinentFeedback_PatinentID] on table [dbo].[PatinentFeedback]
--
PRINT (N'Create index [IDX_PatinentFeedback_PatinentID] on table [dbo].[PatinentFeedback]')
GO
CREATE INDEX IDX_PatinentFeedback_PatinentID
  ON dbo.PatinentFeedback (PatinentID)
  ON tableFG
GO

--
-- Create table [dbo].[PatientsLog]
--
PRINT (N'Create table [dbo].[PatientsLog]')
GO
CREATE TABLE dbo.PatientsLog (
  PatientsLog int IDENTITY,
  PatientsID int NULL,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  NationalCode bigint NULL,
  BirthDate datetime NULL,
  gender nvarchar(8) NULL,
  Phone nvarchar(15) NULL,
  Addres nvarchar(200) NULL,
  RegisterDate datetime NULL,
  PRIMARY KEY CLUSTERED (PatientsLog)
)
ON tableFG
GO

--
-- Create index [IDX_PatientsLog] on table [dbo].[PatientsLog]
--
PRINT (N'Create index [IDX_PatientsLog] on table [dbo].[PatientsLog]')
GO
CREATE INDEX IDX_PatientsLog
  ON dbo.PatientsLog (PatientsID, FirstName, LastName, NationalCode)
  ON tableFG
GO

--
-- Create table [dbo].[patients]
--
PRINT (N'Create table [dbo].[patients]')
GO
CREATE TABLE dbo.patients (
  PatinentID int IDENTITY,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  NationalCode bigint NULL,
  BirthDate datetime NULL,
  gender nvarchar(8) NULL,
  Phone nvarchar(15) NULL,
  Addres nvarchar(200) NULL,
  RegisterDate datetime NULL,
  Deleted bit NULL DEFAULT (0),
  PRIMARY KEY CLUSTERED (PatinentID)
)
ON tableFG
GO

--
-- Create index [IDX_patients] on table [dbo].[patients]
--
PRINT (N'Create index [IDX_patients] on table [dbo].[patients]')
GO
CREATE INDEX IDX_patients
  ON dbo.patients (FirstName, LastName, NationalCode, Phone)
  ON tableFG
GO

--
-- Create or alter function [dbo].[Fn_GetPatientsAge]
--
GO
PRINT (N'Create or alter function [dbo].[Fn_GetPatientsAge]')
GO
CREATE OR ALTER FUNCTION dbo.Fn_GetPatientsAge(@PatientsID INT)
RETURNS INT
AS
	BEGIN
		DECLARE @DateOfBirth DATE
		DECLARE @Age INT
    	SELECT @DateOfBirth = p.BirthDate FROM patients p
		WHERE p.PatinentID = @PatientsID

		SET @Age = DATEDIFF(YEAR , @DateOfBirth , GETDATE())
		RETURN @Age
    END
GO

--
-- Create or alter procedure [dbo].[PRC_SearchPatients]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_SearchPatients]')
GO
CREATE OR ALTER   PROC dbo.PRC_SearchPatients
@FirstName NVARCHAR(30) = NULL ,
@LastName NVARCHAR(30) = NULL , 
@NationalCode BIGINT = NULL , 
@Gender NVARCHAR(15) = NULL
AS
	BEGIN
    	SET NOCOUNT ON
		SELECT p.PatinentID, p.FirstName, p.LastName, p.NationalCode, p.BirthDate, p.Gender, p.PatinentID, p.Addres FROM patients p
		WHERE (p.FirstName LIKE '%' + @FirstName + '%')
		AND (p.LastName LIKE '%' + @LastName + '%')
		AND(p.NationalCode = @NationalCode)
		AND(p.Gender = @Gender)
    END
GO

--
-- Create or alter procedure [dbo].[PRC_Patients_Update]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Patients_Update]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Patients_Update
  @PatinentID INT,
  @FirstName NVARCHAR(30),
  @LastName NVARCHAR(30),
  @NationalCode BIGINT,
  @BirthDate DATETIME,
  @gender NVARCHAR(8),
  @Phone NVARCHAR(15),
  @Addres NVARCHAR(200)
  AS 
  UPDATE patients 
SET FirstName = @FirstName
   ,LastName = @LastName
   ,NationalCode = @NationalCode
   ,BirthDate = @BirthDate
   ,gender = @gender
   ,Phone = @Phone
   ,Addres = @Addres
  
WHERE PatinentID = @PatinentID
 INSERT INTO Patients(PatinentID,FirstName,LastName,NationalCode,BirthDate,gender,Phone,Addres,RegisterDate)
      VALUES(@PatinentID,@FirstName,@LastName,@NationalCode,@BirthDate,@gender,@Phone,@Addres,GETDATE())
GO

--
-- Create or alter procedure [dbo].[PRC_Patients_INS]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Patients_INS]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Patients_INS
  @FirstName NVARCHAR(30),
  @LastName NVARCHAR(30),
  @NationalCode BIGINT,
  @BirthDate DATETIME,
  @gender NVARCHAR(8),
  @Phone NVARCHAR(15),
  @Addres NVARCHAR(200)
  AS 
      INSERT INTO Patients(FirstName,LastName,NationalCode,BirthDate,gender,Phone,Addres,RegisterDate)
      VALUES(@FirstName,@LastName,@NationalCode,@BirthDate,@gender,@Phone,@Addres,GETDATE())
GO

--
-- Create or alter procedure [dbo].[PRC_Patients_Del]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Patients_Del]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Patients_Del
  @PatinentID INT
  AS
    UPDATE patients SET Deleted=1
    WHERE PatinentID=@PatinentID
GO

--
-- Create or alter procedure [dbo].[PRC_FindPatiensWithMostVisit]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_FindPatiensWithMostVisit]')
GO
CREATE OR ALTER   PROC dbo.PRC_FindPatiensWithMostVisit
@Top INT = 10
AS
	BEGIN
    	WITH PatiensVisitCount AS 
        (
        	SELECT  FirstName + ' ' +  LastName AS PatiensName , 
			COUNT(v.VisitsID) AS VisitCount
        	FROM patients p    
			INNER JOIN Visits v ON p.PatinentID = v.PatinentID
			GROUP BY FirstName , LastName
        )
        SELECT TOP (@Top) PatiensName ,  VisitCount
        FROM PatiensVisitCount
		ORDER BY VisitCount DESC
        
    END
GO

--
-- Create or alter view [dbo].[Vw_PatinentInfo]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_PatinentInfo]')
GO
CREATE OR ALTER VIEW dbo.Vw_PatinentInfo
AS
SELECT p.PatinentID,p.FirstName,p.LastName,p.NationalCode,p.BirthDate,p.gender,p.Phone FROM patients p
GO

--
-- Create or alter view [dbo].[Vw_GetLastVisits]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_GetLastVisits]')
GO
--view for patiens visits
CREATE OR ALTER VIEW dbo.Vw_GetLastVisits
AS
SELECT p.FirstName,p.LastName,p.NationalCode,
count(v.VisitsID) AS NumberOfVisits,
max(v.VisitsDate) AS LastVisitDate
FROM Visits v
INNER JOIN patients p ON v.PatinentID = p.PatinentID
GROUP BY p.FirstName,
         p.LastName,
         p.NationalCode
GO

--
-- Create table [dbo].[Medicines]
--
PRINT (N'Create table [dbo].[Medicines]')
GO
CREATE TABLE dbo.Medicines (
  MedicinesID int IDENTITY,
  MedicinesName nvarchar(60) NULL,
  Manufacture nvarchar(60) NULL,
  UnitePrice decimal(18, 2) NULL,
  Stockquantity int NULL,
  Deleted bit NULL DEFAULT (0),
  MedicineManufacturesID int NULL,
  PRIMARY KEY CLUSTERED (MedicinesID)
)
ON tableFG
GO

--
-- Create index [IDX_Medicines] on table [dbo].[Medicines]
--
PRINT (N'Create index [IDX_Medicines] on table [dbo].[Medicines]')
GO
CREATE INDEX IDX_Medicines
  ON dbo.Medicines (MedicinesName, MedicineManufacturesID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_ReportMedicinesUsage]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_ReportMedicinesUsage]')
GO
CREATE OR ALTER   PROC dbo.PRC_ReportMedicinesUsage
AS
	BEGIN
    	SELECT m.MedicineName , 
		COUNT(moid.MedicineID) AS UsageCount
		FROM Medicines m
		INNER JOIN MedicineOutgoingInvoiceDetails moid 
		ON m.MedicineID = moid.MedicineID
		GROUP BY m.MedicineName
    END
GO

--
-- Create or alter procedure [dbo].[PRC_Medicines_Up]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Medicines_Up]')
GO
CREATE OR ALTER   PROC dbo.PRC_Medicines_Up
@MedicineID INT , 
@MedicinesName NVARCHAR(100) , 
@Manufacture NVARCHAR(100) , 
@UnitePrice DECIMAL(18 , 2) , 
@StockQuantity INT 
AS
	UPDATE Medicines 
SET MedicinesName = @MedicinesName, Manufacture = @Manufacture, UnitePrice = @UnitePrice, StockQuantity = @StockQuantity
WHERE MedicinesID = @MedicineID;
GO

--
-- Create or alter procedure [dbo].[PRC_Medicines_INS]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Medicines_INS]')
GO
CREATE OR ALTER   PROC dbo.PRC_Medicines_INS
@MedicinesName NVARCHAR(100) , 
@Manufacture NVARCHAR(100) , 
@UnitePrice DECIMAL(18 , 2) , 
@StockQuantity INT
AS
	INSERT INTO Medicines (MedicinesName, Manufacture, UnitePrice, StockQuantity)
VALUES(@MedicinesName, @Manufacture, @UnitePrice, @StockQuantity);

GO

--
-- Create or alter procedure [dbo].[PRC_Medicines_Del]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Medicines_Del]')
GO
CREATE OR ALTER   PROC dbo.PRC_Medicines_Del
@MedicinesID INT 
AS
	UPDATE Medicines SET DELETED = 1 
	WHERE MedicinesID = @MedicinesID

GO

--
-- Create or alter procedure [dbo].[PRC_MedicineExpairation]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_MedicineExpairation]')
GO
CREATE OR ALTER   PROC dbo.PRC_MedicineExpairation
AS
	BEGIN
    	SELECT 
		mii.MedicineID, 
		m.MedicineName,
		mii.Expairationdate
		FROM MedicineIncomingInovices mii
		INNER JOIN Medicines m ON mii.MedicineID = m.MedicineID
		WHERE Expairationdate <= DATEADD(MONTH , 1 , GETDATE())
    END
GO

--
-- Create table [dbo].[MedicineManufactures]
--
PRINT (N'Create table [dbo].[MedicineManufactures]')
GO
CREATE TABLE dbo.MedicineManufactures (
  MedicineManufacturesID int IDENTITY,
  facturesName nvarchar(30) NULL,
  Addres nvarchar(150) NULL,
  PhoneNumber nvarchar(20) NULL,
  Email nvarchar(40) NULL,
  PRIMARY KEY CLUSTERED (MedicineManufacturesID)
)
ON tableFG
GO

--
-- Create index [IDX_MedicineManufactures] on table [dbo].[MedicineManufactures]
--
PRINT (N'Create index [IDX_MedicineManufactures] on table [dbo].[MedicineManufactures]')
GO
CREATE INDEX IDX_MedicineManufactures
  ON dbo.MedicineManufactures (facturesName, PhoneNumber)
  ON tableFG
GO

--
-- Create or alter view [dbo].[Vw_MedicineManufacture]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_MedicineManufacture]')
GO
CREATE OR ALTER VIEW dbo.Vw_MedicineManufacture
AS
SELECT m.MedicinesID
      ,m.MedicinesName
      ,m.UnitePrice
      ,mm.facturesName
      
FROM Medicines m
INNER JOIN MedicineManufactures mm ON m.MedicineManufacturesID = mm.MedicineManufacturesID
WHERE m.Deleted=0
GO

--
-- Create table [dbo].[MedicalDocument]
--
PRINT (N'Create table [dbo].[MedicalDocument]')
GO
CREATE TABLE dbo.MedicalDocument (
  MedicalDocumentID int IDENTITY,
  PatinentID int NULL,
  MedicalType nvarchar(100) NULL,
  MedicalDate datetime NULL,
  MedicalContent nvarchar(300) NULL,
  PRIMARY KEY CLUSTERED (MedicalDocumentID)
)
ON tableFG
GO

--
-- Create index [IDX_MedicalDocument] on table [dbo].[MedicalDocument]
--
PRINT (N'Create index [IDX_MedicalDocument] on table [dbo].[MedicalDocument]')
GO
CREATE INDEX IDX_MedicalDocument
  ON dbo.MedicalDocument (PatinentID, MedicalDate)
  ON tableFG
GO

--
-- Create table [dbo].[JobInformation]
--
PRINT (N'Create table [dbo].[JobInformation]')
GO
CREATE TABLE dbo.JobInformation (
  JobInformationID int IDENTITY,
  JobTitle nvarchar(30) NULL,
  StaffID int NULL,
  DepartmentID int NULL,
  Hiredate datetime NULL,
  PRIMARY KEY CLUSTERED (JobInformationID)
)
ON tableFG
GO

--
-- Create index [IDX_JobInformation] on table [dbo].[JobInformation]
--
PRINT (N'Create index [IDX_JobInformation] on table [dbo].[JobInformation]')
GO
CREATE INDEX IDX_JobInformation
  ON dbo.JobInformation (JobTitle, StaffID)
  ON tableFG
GO

--
-- Create table [dbo].[InovicesPurchase]
--
PRINT (N'Create table [dbo].[InovicesPurchase]')
GO
CREATE TABLE dbo.InovicesPurchase (
  InovicesPurchaseID int IDENTITY,
  MedicinesName nvarchar(40) NULL,
  Type nvarchar(30) NULL,
  InovicesDate datetime NULL,
  Quntity int NULL,
  UnitPrice decimal(18, 2) NULL,
  TotalAmount decimal(18, 2) NULL,
  MedicineManufacturesID int NULL,
  PRIMARY KEY CLUSTERED (InovicesPurchaseID)
)
ON tableFG
GO

--
-- Create index [IDX_InovicesPurchase_MedicinesName] on table [dbo].[InovicesPurchase]
--
PRINT (N'Create index [IDX_InovicesPurchase_MedicinesName] on table [dbo].[InovicesPurchase]')
GO
CREATE INDEX IDX_InovicesPurchase_MedicinesName
  ON dbo.InovicesPurchase (MedicinesName)
  ON tableFG
GO

--
-- Create table [dbo].[Images]
--
PRINT (N'Create table [dbo].[Images]')
GO
CREATE TABLE dbo.Images (
  ImagesID int IDENTITY,
  VisitsID int NULL,
  PatinentID int NULL,
  IamgeType nvarchar(50) NULL,
  ImageData nvarchar(300) NULL,
  ImageDate datetime NULL,
  PRIMARY KEY CLUSTERED (ImagesID)
)
ON tableFG
GO

--
-- Create index [IDX_Images] on table [dbo].[Images]
--
PRINT (N'Create index [IDX_Images] on table [dbo].[Images]')
GO
CREATE INDEX IDX_Images
  ON dbo.Images (PatinentID, VisitsID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_AddImage]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_AddImage]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_AddImage
@PATINENTID int,
@VisitsID int,
@IamgeType NVARCHAR(40),
@ImageData VARBINARY(max),
@ImageDate DATETIME
AS
BEGIN
	 INSERT INTO Images(PatinentID, VisitsID, IamgeType, ImageData,ImageDate)
   VALUES(@PATINENTID,@VisitsID,@IamgeType,@ImageData,GETDATE())
   --add image report to image table
END
GO

--
-- Create table [dbo].[ImageingComment]
--
PRINT (N'Create table [dbo].[ImageingComment]')
GO
CREATE TABLE dbo.ImageingComment (
  ImageingCommentID int IDENTITY,
  ImagesID int NULL,
  CommentText nvarchar(200) NULL,
  CommentDate datetime NULL,
  PRIMARY KEY CLUSTERED (ImageingCommentID)
)
ON tableFG
GO

--
-- Create index [IDX_ImageingComment] on table [dbo].[ImageingComment]
--
PRINT (N'Create index [IDX_ImageingComment] on table [dbo].[ImageingComment]')
GO
CREATE INDEX IDX_ImageingComment
  ON dbo.ImageingComment (ImagesID)
  ON tableFG
GO

--
-- Create table [dbo].[FinancialTransaction]
--
PRINT (N'Create table [dbo].[FinancialTransaction]')
GO
CREATE TABLE dbo.FinancialTransaction (
  FinancialTransactionID int IDENTITY,
  VisitsID int NULL,
  TransactionType nvarchar(200) NULL,
  Amount decimal(18, 2) NULL,
  TransactionDate datetime NULL,
  PRIMARY KEY CLUSTERED (FinancialTransactionID)
)
ON tableFG
GO

--
-- Create index [IDX_FinancialTransaction] on table [dbo].[FinancialTransaction]
--
PRINT (N'Create index [IDX_FinancialTransaction] on table [dbo].[FinancialTransaction]')
GO
CREATE INDEX IDX_FinancialTransaction
  ON dbo.FinancialTransaction (Amount, TransactionDate)
  ON tableFG
GO

--
-- Create table [dbo].[Doctors]
--
PRINT (N'Create table [dbo].[Doctors]')
GO
CREATE TABLE dbo.Doctors (
  DoctorID int NOT NULL,
  FirstName nvarchar(30) NULL,
  LastName nvarchar(30) NULL,
  Expertise nvarchar(30) NULL,
  Phone nvarchar(15) NULL,
  Email nvarchar(30) NULL,
  HireDate datetime NULL,
  PRIMARY KEY CLUSTERED (DoctorID)
)
ON tableFG
GO

--
-- Create index [IDX_Doctors] on table [dbo].[Doctors]
--
PRINT (N'Create index [IDX_Doctors] on table [dbo].[Doctors]')
GO
CREATE INDEX IDX_Doctors
  ON dbo.Doctors (FirstName, LastName, Expertise, Email)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_DoctorByDepartment]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_DoctorByDepartment]')
GO
CREATE OR ALTER   PROC dbo.PRC_DoctorByDepartment
@DepartmentID INT 
AS
	BEGIN
    	SELECT 
		d.DoctorID,
		d.FirstName, 
		d.LastName,
		d.Specialiization  ,
		d1.DepartmentName
		FROM Doctors d
		INNER JOIN Departments d1 ON d.DoctorID = d1.DoctorID
		WHERE d1.DepartmentID = @DepartmentID
    END
GO

--
-- Create or alter view [dbo].[Vw_patientsVisits]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_patientsVisits]')
GO
CREATE OR ALTER VIEW dbo.Vw_patientsVisits
AS
SELECT 
       d.FirstName
      ,d.LastName
      ,count(v.VisitsID) AS patientsVisits
FROM Doctors d
INNER JOIN Visits v ON d.DoctorID = v.DoctorID
WHERE MONTH(v.VisitsDate)= MONTH(GETDATE()) AND year(v.VisitsDate)=YEAR(GETDATE()) --get visits count for this month
GROUP BY d.FirstName
        ,d.LastName
GO

--
-- Create or alter view [dbo].[Vw_FinancialVisits]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_FinancialVisits]')
GO
CREATE OR ALTER VIEW dbo.Vw_FinancialVisits
AS
  SELECT 
  v.VisitsDate,
  v.Diagnosis,
  v.Prescription,
  p.FirstName+' '+p.LastName AS patientsName,
  d.FirstName+' '+d.LastName AS DoctorName,
  ft.TransactionType,
  ft.Amount,
  ft.TransactionDate
  FROM Visits v
  INNER JOIN patients p ON v.PatinentID = p.PatinentID
  INNER JOIN Doctors d ON v.DoctorID = d.DoctorID
  INNER JOIN FinancialTransaction ft ON v.VisitsID = ft.VisitsID
GO

--
-- Create or alter view [dbo].[Vw_DoctorsInfo]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_DoctorsInfo]')
GO
CREATE OR ALTER VIEW dbo.Vw_DoctorsInfo
AS
SELECT d.DoctorID,d.FirstName,d.LastName,d.Expertise, d.Phone, d.Email, d.HireDate FROM Doctors d
GO

--
-- Create table [dbo].[Department]
--
PRINT (N'Create table [dbo].[Department]')
GO
CREATE TABLE dbo.Department (
  DepartmentID int NOT NULL,
  DepartmentName nvarchar(30) NULL,
  FloorNumber int NULL,
  DoctorID int NULL,
  CONSTRAINT PK_Department_DepartmentID PRIMARY KEY CLUSTERED (DepartmentID)
)
ON tableFG
GO

--
-- Create index [IDX_Department_DepartmentID] on table [dbo].[Department]
--
PRINT (N'Create index [IDX_Department_DepartmentID] on table [dbo].[Department]')
GO
CREATE INDEX IDX_Department_DepartmentID
  ON dbo.Department (DepartmentID)
  ON tableFG
GO

--
-- Create or alter view [dbo].[Vw_Visits]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_Visits]')
GO
CREATE OR ALTER VIEW dbo.Vw_Visits
AS
SELECT v.VisitsID,
v.PatinentID,
p.FirstName+' '+p.LastName AS patinentName,
 v.DoctorID,
 d.FirstName+' '+d.LastName AS DoctorName,
 v.VisitsDate, v.Diagnosis, v.Prescription,d1.DepartmentName FROM Visits v
INNER JOIN patients p ON v.PatinentID = p.PatinentID
INNER JOIN Doctors d ON v.DoctorID = d.DoctorID
INNER JOIN Department d1 ON d.DoctorID = d1.DoctorID
GO

--
-- Create or alter view [dbo].[Vw_SttafExperience]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_SttafExperience]')
GO
--view for staffs Experience
CREATE OR ALTER VIEW dbo.Vw_SttafExperience
AS
SELECT s.StaffID
      ,s.FirstName
      ,s.LastName
      ,d.DepartmentName
      ,DATEDIFF(YEAR,s.HireDate,GETDATE())AS yearsOFwork
FROM Staff s
INNER JOIN Department d ON s.DepartmentID = d.DepartmentID
WHERE DATEDIFF(YEAR,s.HireDate,GETDATE())>1
GO

--
-- Create or alter view [dbo].[Vw_EmergencyPatients]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_EmergencyPatients]')
GO
CREATE OR ALTER VIEW dbo.Vw_EmergencyPatients
AS
SELECT p.PatinentID
      ,p.FirstName
      ,p.LastName
      ,p.NationalCode
      ,p.gender
      ,p.Phone
      ,v.VisitsDate
      

FROM patients p
INNER JOIN Visits v ON p.PatinentID = v.PatinentID
LEFT JOIN Department d ON v.DepartmentID = d.DepartmentID
INNER JOIN PatinentFeedback pf ON p.PatinentID = pf.PatinentID
WHERE d.DepartmentName='emergency' AND pf.FeedbackText IS NOT NULL
GO

--
-- Create or alter view [dbo].[Vw_DepartmentStaff]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_DepartmentStaff]')
GO
CREATE OR ALTER VIEW dbo.Vw_DepartmentStaff
AS
  SELECT d.DepartmentName ,
  count(s.StaffID) AS NumberOFstaff
  FROM Department d
  INNER JOIN Staff s ON d.DepartmentID = s.DepartmentID
  GROUP BY d.DepartmentName
GO

--
-- Create table [dbo].[MedicineincomeInvices]
--
PRINT (N'Create table [dbo].[MedicineincomeInvices]')
GO
CREATE TABLE dbo.MedicineincomeInvices (
  MedicineincomeInvicesID int IDENTITY,
  ReciveDate datetime NULL,
  UnitPrice decimal(18, 2) NULL,
  StockQuantity int NULL,
  TotalAmount decimal(18, 2) NULL,
  MedicineManufacturesID int NULL,
  expirationDate datetime NULL,
  MedicineID int NULL,
  PRIMARY KEY CLUSTERED (MedicineincomeInvicesID)
)
ON tableFG
GO

--
-- Create index [IDX_MedicineincomeInvices] on table [dbo].[MedicineincomeInvices]
--
PRINT (N'Create index [IDX_MedicineincomeInvices] on table [dbo].[MedicineincomeInvices]')
GO
CREATE INDEX IDX_MedicineincomeInvices
  ON dbo.MedicineincomeInvices (ReciveDate, MedicineID)
  ON tableFG
GO

--
-- Create or alter view [dbo].[Vw_MedicineIncomingDeatails]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_MedicineIncomingDeatails]')
GO
CREATE OR ALTER VIEW dbo.Vw_MedicineIncomingDeatails
AS
SELECT mi.MedicineincomeInvicesID
      ,m.MedicinesName
      ,mi.UnitPrice
      ,mi.StockQuantity
      ,mi.ReciveDate
      ,mi.expirationDate
      ,ip.InovicesDate
      ,ip.Type
FROM MedicineincomeInvices mi
INNER JOIN Medicines m ON mi.MedicineID = m.MedicinesID
INNER JOIN InovicesPurchase ip ON mi.MedicineManufacturesID = ip.MedicineManufacturesID 
GO

--
-- Create or alter view [dbo].[Vw_medicineexpirationDate]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_medicineexpirationDate]')
GO
CREATE OR ALTER VIEW dbo.Vw_medicineexpirationDate
AS  
  SELECT m.MedicinesID
        ,m.MedicinesName
        ,m.Manufacture
        ,m.UnitePrice
        ,mi.expirationDate
  FROM  Medicines m
INNER JOIN MedicineincomeInvices mi ON m.MedicinesID = mi.MedicineID
WHERE mi.expirationDate <= DATEADD(MONTH,3,GETDATE())
GO

--
-- Create table [dbo].[MedicinesOutgoingInvoiceDetails]
--
PRINT (N'Create table [dbo].[MedicinesOutgoingInvoiceDetails]')
GO
CREATE TABLE dbo.MedicinesOutgoingInvoiceDetails (
  DetailsID int IDENTITY,
  InvoiceID int NULL,
  MedicinesID int NULL,
  Quantity int NULL,
  TotalAmount decimal(18, 2) NULL,
  PRIMARY KEY CLUSTERED (DetailsID)
)
ON tableFG
GO

--
-- Create index [IDX_MedicinesOutgoingInvoiceDetails] on table [dbo].[MedicinesOutgoingInvoiceDetails]
--
PRINT (N'Create index [IDX_MedicinesOutgoingInvoiceDetails] on table [dbo].[MedicinesOutgoingInvoiceDetails]')
GO
CREATE INDEX IDX_MedicinesOutgoingInvoiceDetails
  ON dbo.MedicinesOutgoingInvoiceDetails (InvoiceID, MedicinesID)
  ON tableFG
GO

--
-- Create table [dbo].[MedicinesOutgoingInvoice]
--
PRINT (N'Create table [dbo].[MedicinesOutgoingInvoice]')
GO
CREATE TABLE dbo.MedicinesOutgoingInvoice (
  InvoiceID int IDENTITY,
  PatinentID int NULL,
  IssueDate datetime NULL,
  TotalAmount decimal(18, 2) NULL,
  PRIMARY KEY CLUSTERED (InvoiceID)
)
ON tableFG
GO

--
-- Create index [IDX_MedicinesOutgoingInvoice_PatinentID] on table [dbo].[MedicinesOutgoingInvoice]
--
PRINT (N'Create index [IDX_MedicinesOutgoingInvoice_PatinentID] on table [dbo].[MedicinesOutgoingInvoice]')
GO
CREATE INDEX IDX_MedicinesOutgoingInvoice_PatinentID
  ON dbo.MedicinesOutgoingInvoice (PatinentID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_Sellmedicine]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_Sellmedicine]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_Sellmedicine
@PATINENTID int,
@MedicinesID int,
@quantity int
AS
BEGIN
	    DECLARE @UnitPrice DECIMAL(18,2)
      DECLARE @TotalAmount DECIMAL(18,2)

      SELECT @UnitPrice=m.UnitePrice 
      FROM Medicines m
      WHERE m.MedicinesID=@MedicinesID


      SET @TotalAmount =@UnitPrice*@quantity


      INSERT INTO MedicinesOutgoingInvoice (PatinentID, IssueDate, TotalAmount)
                  VALUES (@PATINENTID, GETDATE(), @TotalAmount);


      INSERT INTO MedicinesOutgoingInvoiceDetails (InvoiceID, MedicinesID, Quantity, TotalAmount)
                  VALUES (SCOPE_IDENTITY(), @MedicinesID, @quantity, @TotalAmount);


      UPDATE Medicines SET Stockquantity = Stockquantity-@quantity
      WHERE MedicinesID = @MedicinesID;

END
GO

--
-- Create table [dbo].[TaxInvoices]
--
PRINT (N'Create table [dbo].[TaxInvoices]')
GO
CREATE TABLE dbo.TaxInvoices (
  TaxInvoicesID int IDENTITY,
  InvoicesID int NULL,
  TaxAmount decimal(18, 2) NULL,
  TaxRate decimal(5, 2) NULL,
  PRIMARY KEY CLUSTERED (TaxInvoicesID)
)
ON tableFG
GO

--
-- Create index [IDX_TaxInvoices] on table [dbo].[TaxInvoices]
--
PRINT (N'Create index [IDX_TaxInvoices] on table [dbo].[TaxInvoices]')
GO
CREATE INDEX IDX_TaxInvoices
  ON dbo.TaxInvoices (InvoicesID, TaxAmount)
  ON tableFG
GO

--
-- Create table [dbo].[PaidTaxes]
--
PRINT (N'Create table [dbo].[PaidTaxes]')
GO
CREATE TABLE dbo.PaidTaxes (
  PaidTaxesID int IDENTITY,
  TaxInvoicesID int NULL,
  PaymentDate datetime NULL,
  Amount decimal(18, 2) NULL,
  PRIMARY KEY CLUSTERED (PaidTaxesID)
)
ON tableFG
GO

--
-- Create index [IDX_PaidTaxes] on table [dbo].[PaidTaxes]
--
PRINT (N'Create index [IDX_PaidTaxes] on table [dbo].[PaidTaxes]')
GO
CREATE INDEX IDX_PaidTaxes
  ON dbo.PaidTaxes (TaxInvoicesID, PaymentDate)
  ON tableFG
GO

--
-- Create or alter function [dbo].[Fn_GettotalTaxByMonth]
--
GO
PRINT (N'Create or alter function [dbo].[Fn_GettotalTaxByMonth]')
GO
CREATE OR ALTER FUNCTION dbo.Fn_GettotalTaxByMonth(@Month INT , @Year INT)
RETURNS DECIMAL(18,2)
AS
	BEGIN
		DECLARE @Amount DECIMAL(18,2)
    	SELECT @Amount = SUM(pt.Amount) FROM PaidTaxes pt
		WHERE YEAR(pt.PaymentDate )= @Year AND MONTH(pt.PaymentDate) = @Month
		RETURN @Amount
    END
GO

--
-- Create table [dbo].[Appointment]
--
PRINT (N'Create table [dbo].[Appointment]')
GO
CREATE TABLE dbo.Appointment (
  AppointmentID int IDENTITY,
  DoctorID int NULL,
  PatinentID int NULL,
  AppointmentDATETIME datetime NULL,
  IsComplited bit NULL,
  PRIMARY KEY CLUSTERED (AppointmentID)
)
ON tableFG
GO

--
-- Create index [IDX_Appointment] on table [dbo].[Appointment]
--
PRINT (N'Create index [IDX_Appointment] on table [dbo].[Appointment]')
GO
CREATE INDEX IDX_Appointment
  ON dbo.Appointment (DoctorID, PatinentID)
  ON tableFG
GO

--
-- Create or alter function [dbo].[fn_GetAppointmetCount]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetAppointmetCount]')
GO
CREATE OR ALTER FUNCTION dbo.fn_GetAppointmetCount(@DoctorID INT)
RETURNS INT
AS
BEGIN
  DECLARE @Appointmet int
	SELECT @Appointmet= COUNT(*) 
  FROM Appointment a
  INNER JOIN Doctors d ON a.DoctorID = d.DoctorID
  WHERE a.DoctorID = @DoctorID
  RETURN @Appointmet
END
GO

--
-- Create or alter view [dbo].[Vw_AppointmentsDeatails]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_AppointmentsDeatails]')
GO
CREATE OR ALTER VIEW dbo.Vw_AppointmentsDeatails
AS
SELECT a.AppointmentID,
a.AppointmentDATETIME,
p.FirstName+' '+p.LastName AS patientsName,
p.NationalCode,
p.gender,
d.FirstName+' '+d.LastName AS DoctorName,
d.Expertise,
d1.DepartmentName
 FROM Appointment a
  INNER JOIN patients p ON a.PatinentID = p.PatinentID
  INNER JOIN Doctors d ON a.DoctorID = d.DoctorID
  INNER JOIN Department d1 ON d.DoctorID = d1.DoctorID
GO

--
-- Create table [dbo].[Payments]
--
PRINT (N'Create table [dbo].[Payments]')
GO
CREATE TABLE dbo.Payments (
  PaymentID int IDENTITY,
  PatinentID int NULL,
  InovicesID int NULL,
  PaymantDate datetime NULL,
  Amount decimal(18, 2) NULL,
  PRIMARY KEY CLUSTERED (PaymentID)
)
ON tableFG
GO

--
-- Create index [IDX_Payments] on table [dbo].[Payments]
--
PRINT (N'Create index [IDX_Payments] on table [dbo].[Payments]')
GO
CREATE INDEX IDX_Payments
  ON dbo.Payments (PatinentID, InovicesID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_GetPatientsAppointmetsDetails]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_GetPatientsAppointmetsDetails]')
GO
CREATE OR ALTER   PROC dbo.PRC_GetPatientsAppointmetsDetails
@PatientsID INT , 
@StartDate  DATETIME , 
@EndDate DATETIME , 
@ISComplete BIT
AS
	BEGIN
    	SELECT 
		p.FirstName + ' ' + p.LastName AS PatientsName , 
		a.AppointmetsDateTime, 
		a.IsCompleted , 
		p1.PaymentDate , 
		v.VisitDate
		FROM Appointmets a
		INNER JOIN Patients p ON a.PatientsID = p.PatientsID
		LEFT JOIN Payments p1 ON p.PatientsID = p1.PatientsID
		LEFT JOIN Visits v ON p.PatientsID = v.PatientsID
		WHERE a.PatientsID = @PatientsID AND a.AppointmetsDateTime BETWEEN @StartDate AND @EndDate AND a.IsCompleted = @ISComplete
    END
GO

--
-- Create table [dbo].[Inovices]
--
PRINT (N'Create table [dbo].[Inovices]')
GO
CREATE TABLE dbo.Inovices (
  InovicesID int IDENTITY,
  PatinentID int NULL,
  InovicesDate datetime NULL,
  TotalAmount decimal(18, 2) NULL,
  ISpaid bit NULL,
  Quntity int NULL,
  PRIMARY KEY CLUSTERED (InovicesID)
)
ON tableFG
GO

--
-- Create index [IDX_Inovices_PatinentID] on table [dbo].[Inovices]
--
PRINT (N'Create index [IDX_Inovices_PatinentID] on table [dbo].[Inovices]')
GO
CREATE INDEX IDX_Inovices_PatinentID
  ON dbo.Inovices (PatinentID)
  ON tableFG
GO

--
-- Create or alter function [dbo].[fn_CalculatePatients]
--
GO
PRINT (N'Create or alter function [dbo].[fn_CalculatePatients]')
GO
CREATE OR ALTER FUNCTION dbo.fn_CalculatePatients(@PatientsID INT)
RETURNS DECIMAL(18,2)
AS
	BEGIN
		DECLARE @TotalAmount DECIMAL(18,2)
		DECLARE @Amount DECIMAL(18,2)

    	SELECT @TotalAmount = i.TotalAmount FROM Inovices i
		WHERE i.PatinentID = @PatientsID


		SELECT @Amount = p.Amount FROM Payments p
		WHERE p.PatinentID = @PatientsID

		RETURN (@TotalAmount - @Amount)
    END
GO

--
-- Create or alter procedure [dbo].[PRC_PayInvoice]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_PayInvoice]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_PayInvoice
@InovicesID int,
@Amount DECIMAL(18,2),
@PATINENTID int
AS
BEGIN
	UPDATE Inovices SET ISpaid =1
  WHERE InovicesID=@InovicesID


  INSERT INTO Payments(PatinentID, InovicesID, PaymantDate, Amount)
  VALUES(@PATINENTID,@InovicesID,GETDATE(),@Amount)

END
GO

--
-- Create or alter procedure [dbo].[PRC_GetPaidInovicesPatients]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_GetPaidInovicesPatients]')
GO
CREATE OR ALTER   PROC dbo.PRC_GetPaidInovicesPatients
@PatientsID INT
AS
	BEGIN
    	SELECT i.InovicesID, i.PatinentID, i.InovicesDate, i.TotalAmount , p.PaymantDate FROM Inovices i
		INNER JOIN Payments p ON i.InovicesID = p.InovicesID
		WHERE i.PatinentID = @PatientsID AND i.IsPaid =1
    END
GO

--
-- Create or alter procedure [dbo].[PRC_calculateTaxforInvoice]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_calculateTaxforInvoice]')
GO
CREATE OR ALTER PROCEDURE dbo.PRC_calculateTaxforInvoice
@InovicesID INT
AS
BEGIN
	  
    DECLARE @TotalAmount DECIMAL(18,2)
    DECLARE @Taxrate DECIMAL(18,2)
    DECLARE @TaxAmount DECIMAL(18,2)
    SELECT @TotalAmount= i.TotalAmount
    FROM Inovices i
    WHERE i.InovicesID=@InovicesID --get total amount from invoice table

    SET @Taxrate=0.1
    SET @taxAmount=@Taxrate*@TotalAmount --calculat tax amount

    INSERT INTO TaxInvoices (InvoicesID, TaxAmount, TaxRate)
     VALUES (@InovicesID, @taxAmount, @Taxrate);

END
GO

--
-- Create or alter view [dbo].[Vw_TaxinviceDeatail]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_TaxinviceDeatail]')
GO
CREATE OR ALTER VIEW dbo.Vw_TaxinviceDeatail
AS
SELECT ti.TaxInvoicesID
      ,ti.TaxAmount
      ,ti.TaxRate
      ,i.InovicesID
      ,i.TotalAmount
      ,pt.PaymentDate
      ,pt.Amount
FROM TaxInvoices ti
INNER JOIN Inovices i ON ti.InvoicesID = i.InovicesID
LEFT JOIN PaidTaxes pt ON ti.TaxInvoicesID = pt.TaxInvoicesID
WHERE i.ISpaid = 0
GO

--
-- Create or alter view [dbo].[Vw_PatiensTotalPayment]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_PatiensTotalPayment]')
GO
--view for patiens payment and tax
CREATE OR ALTER VIEW dbo.Vw_PatiensTotalPayment
AS
SELECT p.PatinentID
      ,p.FirstName
      ,p.LastName
      ,p.NationalCode
      ,sum(p1.Amount) AS TotalPayment
      ,sum(ti.TaxAmount) AS TotalTax
      
FROM patients p
INNER JOIN Payments p1 ON p.PatinentID = p1.PatinentID
INNER JOIN Inovices i ON p.PatinentID = i.PatinentID
INNER JOIN TaxInvoices ti ON i.InovicesID = ti.InvoicesID
GROUP BY p.PatinentID
        ,p.FirstName
        ,p.LastName
        ,p.NationalCode
GO

--
-- Create or alter view [dbo].[Vw_InvoicePayment]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_InvoicePayment]')
GO
 CREATE OR ALTER VIEW dbo.Vw_InvoicePayment
AS
  SELECT i.PatinentID,
  p1.FirstName,
  p1.LastName,
  p1.NationalCode,
  i.InovicesDate,
  i.TotalAmount,
  i.ISpaid,
  p.PaymantDate,
  p.Amount
  FROM Inovices i
  LEFT JOIN Payments p ON i.InovicesID = p.InovicesID
  LEFT JOIN patients p1 ON i.PatinentID = p1.PatinentID
GO

--
-- Create or alter view [dbo].[Vw_DepartmentIncom]
--
GO
PRINT (N'Create or alter view [dbo].[Vw_DepartmentIncom]')
GO
CREATE OR ALTER VIEW dbo.Vw_DepartmentIncom
AS
SELECT d.DepartmentName,
sum(i.TotalAmount) AS TotalIncom
FROM Department d
INNER JOIN Visits v ON d.DepartmentID = v.DepartmentID
INNER JOIN Inovices i ON v.PatinentID = i.PatinentID
WHERE i.ISpaid = 0
GROUP BY d.DepartmentName
GO

--
-- Create table [dbo].[UsersRoles]
--
PRINT (N'Create table [dbo].[UsersRoles]')
GO
CREATE TABLE dbo.UsersRoles (
  UsersRolesID int IDENTITY,
  UsersID int NULL,
  RolesID int NULL,
  PRIMARY KEY CLUSTERED (UsersRolesID)
)
ON tableFG
GO

--
-- Create index [IDX_UsersRoles_UsersID] on table [dbo].[UsersRoles]
--
PRINT (N'Create index [IDX_UsersRoles_UsersID] on table [dbo].[UsersRoles]')
GO
CREATE INDEX IDX_UsersRoles_UsersID
  ON dbo.UsersRoles (UsersID)
  ON tableFG
GO

--
-- Create or alter procedure [dbo].[PRC_ReportIncomeExpense]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_ReportIncomeExpense]')
GO
CREATE OR ALTER   PROC dbo.PRC_ReportIncomeExpense
@StartDate DATETIME, 
@EndDate DATETIME
AS
	BEGIN
    	SELECT(SELECT SUM(ft.Amount) FROM FinaicialTranstions ft WHERE ft.TranstionDate BETWEEN @StartDate AND @EndDate
		AND ft.TranstionType = 'Income') as TotalIncome , 
		(SELECT SUM(ft.Amount) FROM FinaicialTranstions ft WHERE ft.TranstionDate BETWEEN @StartDate AND @EndDate
		AND ft.TranstionType = 'Expense') as TotalExpense 
    END
GO

--
-- Create or alter procedure [dbo].[PRC_GetVisitCountByDay]
--
GO
PRINT (N'Create or alter procedure [dbo].[PRC_GetVisitCountByDay]')
GO
CREATE OR ALTER   PROC dbo.PRC_GetVisitCountByDay
@StartDate DATE , 
@EndDate DATE
AS
	BEGIN
    	SELECT 
		DATENAME(WEEKDAY ,AppointmetsDateTime )AS DayOfWeek, 
		COUNT(AppointmetID) AS VisitCount
		FROM Appointmets a
		WHERE a.AppointmetsDateTime BETWEEN @StartDate AND @EndDate
		GROUP BY DATENAME(WEEKDAY ,AppointmetsDateTime )
		ORDER BY VisitCount DESC
    END
GO

-- 
-- Dumping data for table VisitSchedule
--
PRINT (N'Dumping data for table VisitSchedule')
-- Table HIS.dbo.VisitSchedule does not contain any data (it is empty)

-- 
-- Dumping data for table Visits
--
PRINT (N'Dumping data for table Visits')
-- Table HIS.dbo.Visits does not contain any data (it is empty)

-- 
-- Dumping data for table UsersRoles
--
PRINT (N'Dumping data for table UsersRoles')
-- Table HIS.dbo.UsersRoles does not contain any data (it is empty)

-- 
-- Dumping data for table Users
--
PRINT (N'Dumping data for table Users')
-- Table HIS.dbo.Users does not contain any data (it is empty)

-- 
-- Dumping data for table UserLog
--
PRINT (N'Dumping data for table UserLog')
-- Table HIS.dbo.UserLog does not contain any data (it is empty)

-- 
-- Dumping data for table Tests
--
PRINT (N'Dumping data for table Tests')
-- Table HIS.dbo.Tests does not contain any data (it is empty)

-- 
-- Dumping data for table TestResult
--
PRINT (N'Dumping data for table TestResult')
-- Table HIS.dbo.TestResult does not contain any data (it is empty)

-- 
-- Dumping data for table TaxInvoices
--
PRINT (N'Dumping data for table TaxInvoices')
-- Table HIS.dbo.TaxInvoices does not contain any data (it is empty)

-- 
-- Dumping data for table StaffFeedback
--
PRINT (N'Dumping data for table StaffFeedback')
-- Table HIS.dbo.StaffFeedback does not contain any data (it is empty)

-- 
-- Dumping data for table StaffBox
--
PRINT (N'Dumping data for table StaffBox')
-- Table HIS.dbo.StaffBox does not contain any data (it is empty)

-- 
-- Dumping data for table Staff
--
PRINT (N'Dumping data for table Staff')
-- Table HIS.dbo.Staff does not contain any data (it is empty)

-- 
-- Dumping data for table SpecialReport
--
PRINT (N'Dumping data for table SpecialReport')
-- Table HIS.dbo.SpecialReport does not contain any data (it is empty)

-- 
-- Dumping data for table Roles
--
PRINT (N'Dumping data for table Roles')
-- Table HIS.dbo.Roles does not contain any data (it is empty)

-- 
-- Dumping data for table Payments
--
PRINT (N'Dumping data for table Payments')
-- Table HIS.dbo.Payments does not contain any data (it is empty)

-- 
-- Dumping data for table PatinentFeedback
--
PRINT (N'Dumping data for table PatinentFeedback')
-- Table HIS.dbo.PatinentFeedback does not contain any data (it is empty)

-- 
-- Dumping data for table PatientsLog
--
PRINT (N'Dumping data for table PatientsLog')
-- Table HIS.dbo.PatientsLog does not contain any data (it is empty)

-- 
-- Dumping data for table patients
--
PRINT (N'Dumping data for table patients')
-- Table HIS.dbo.patients does not contain any data (it is empty)

-- 
-- Dumping data for table PaidTaxes
--
PRINT (N'Dumping data for table PaidTaxes')
-- Table HIS.dbo.PaidTaxes does not contain any data (it is empty)

-- 
-- Dumping data for table MedicinesOutgoingInvoiceDetails
--
PRINT (N'Dumping data for table MedicinesOutgoingInvoiceDetails')
-- Table HIS.dbo.MedicinesOutgoingInvoiceDetails does not contain any data (it is empty)

-- 
-- Dumping data for table MedicinesOutgoingInvoice
--
PRINT (N'Dumping data for table MedicinesOutgoingInvoice')
-- Table HIS.dbo.MedicinesOutgoingInvoice does not contain any data (it is empty)

-- 
-- Dumping data for table Medicines
--
PRINT (N'Dumping data for table Medicines')
-- Table HIS.dbo.Medicines does not contain any data (it is empty)

-- 
-- Dumping data for table MedicineManufactures
--
PRINT (N'Dumping data for table MedicineManufactures')
-- Table HIS.dbo.MedicineManufactures does not contain any data (it is empty)

-- 
-- Dumping data for table MedicineincomeInvices
--
PRINT (N'Dumping data for table MedicineincomeInvices')
-- Table HIS.dbo.MedicineincomeInvices does not contain any data (it is empty)

-- 
-- Dumping data for table MedicalDocument
--
PRINT (N'Dumping data for table MedicalDocument')
-- Table HIS.dbo.MedicalDocument does not contain any data (it is empty)

-- 
-- Dumping data for table JobInformation
--
PRINT (N'Dumping data for table JobInformation')
-- Table HIS.dbo.JobInformation does not contain any data (it is empty)

-- 
-- Dumping data for table InovicesPurchase
--
PRINT (N'Dumping data for table InovicesPurchase')
-- Table HIS.dbo.InovicesPurchase does not contain any data (it is empty)

-- 
-- Dumping data for table Inovices
--
PRINT (N'Dumping data for table Inovices')
-- Table HIS.dbo.Inovices does not contain any data (it is empty)

-- 
-- Dumping data for table Images
--
PRINT (N'Dumping data for table Images')
-- Table HIS.dbo.Images does not contain any data (it is empty)

-- 
-- Dumping data for table ImageingComment
--
PRINT (N'Dumping data for table ImageingComment')
-- Table HIS.dbo.ImageingComment does not contain any data (it is empty)

-- 
-- Dumping data for table Hospital
--
PRINT (N'Dumping data for table Hospital')
-- Table HIS.dbo.Hospital does not contain any data (it is empty)

-- 
-- Dumping data for table FinancialTransaction
--
PRINT (N'Dumping data for table FinancialTransaction')
-- Table HIS.dbo.FinancialTransaction does not contain any data (it is empty)

-- 
-- Dumping data for table Doctors
--
PRINT (N'Dumping data for table Doctors')
-- Table HIS.dbo.Doctors does not contain any data (it is empty)

-- 
-- Dumping data for table Department
--
PRINT (N'Dumping data for table Department')
-- Table HIS.dbo.Department does not contain any data (it is empty)

-- 
-- Dumping data for table Appointment
--
PRINT (N'Dumping data for table Appointment')
-- Table HIS.dbo.Appointment does not contain any data (it is empty)

USE HIS
GO

IF DB_NAME() <> N'HIS' SET NOEXEC ON
GO

--
-- Create foreign key on table [dbo].[SpecialReport]
--
PRINT (N'Create foreign key on table [dbo].[SpecialReport]')
GO
ALTER TABLE dbo.SpecialReport
  ADD FOREIGN KEY (patinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[PatinentFeedback]
--
PRINT (N'Create foreign key on table [dbo].[PatinentFeedback]')
GO
ALTER TABLE dbo.PatinentFeedback
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[Medicines]
--
PRINT (N'Create foreign key on table [dbo].[Medicines]')
GO
ALTER TABLE dbo.Medicines
  ADD FOREIGN KEY (MedicineManufacturesID) REFERENCES dbo.MedicineManufactures (MedicineManufacturesID)
GO

--
-- Create foreign key on table [dbo].[MedicineincomeInvices]
--
PRINT (N'Create foreign key on table [dbo].[MedicineincomeInvices]')
GO
ALTER TABLE dbo.MedicineincomeInvices
  ADD FOREIGN KEY (MedicineManufacturesID) REFERENCES dbo.MedicineManufactures (MedicineManufacturesID)
GO

--
-- Create foreign key on table [dbo].[MedicineincomeInvices]
--
PRINT (N'Create foreign key on table [dbo].[MedicineincomeInvices]')
GO
ALTER TABLE dbo.MedicineincomeInvices
  ADD FOREIGN KEY (MedicineID) REFERENCES dbo.Medicines (MedicinesID)
GO

--
-- Create foreign key on table [dbo].[MedicalDocument]
--
PRINT (N'Create foreign key on table [dbo].[MedicalDocument]')
GO
ALTER TABLE dbo.MedicalDocument
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[InovicesPurchase]
--
PRINT (N'Create foreign key on table [dbo].[InovicesPurchase]')
GO
ALTER TABLE dbo.InovicesPurchase
  ADD FOREIGN KEY (MedicineManufacturesID) REFERENCES dbo.MedicineManufactures (MedicineManufacturesID)
GO

--
-- Create foreign key on table [dbo].[Department]
--
PRINT (N'Create foreign key on table [dbo].[Department]')
GO
ALTER TABLE dbo.Department
  ADD FOREIGN KEY (DoctorID) REFERENCES dbo.Doctors (DoctorID)
GO

--
-- Create foreign key on table [dbo].[VisitSchedule]
--
PRINT (N'Create foreign key on table [dbo].[VisitSchedule]')
GO
ALTER TABLE dbo.VisitSchedule
  ADD FOREIGN KEY (DepartmentID) REFERENCES dbo.Department (DepartmentID)
GO

--
-- Create foreign key on table [dbo].[VisitSchedule]
--
PRINT (N'Create foreign key on table [dbo].[VisitSchedule]')
GO
ALTER TABLE dbo.VisitSchedule
  ADD FOREIGN KEY (DoctorID) REFERENCES dbo.Doctors (DoctorID)
GO

--
-- Create foreign key on table [dbo].[Visits]
--
PRINT (N'Create foreign key on table [dbo].[Visits]')
GO
ALTER TABLE dbo.Visits
  ADD FOREIGN KEY (DepartmentID) REFERENCES dbo.Department (DepartmentID)
GO

--
-- Create foreign key on table [dbo].[Visits]
--
PRINT (N'Create foreign key on table [dbo].[Visits]')
GO
ALTER TABLE dbo.Visits
  ADD FOREIGN KEY (DoctorID) REFERENCES dbo.Doctors (DoctorID)
GO

--
-- Create foreign key on table [dbo].[Visits]
--
PRINT (N'Create foreign key on table [dbo].[Visits]')
GO
ALTER TABLE dbo.Visits
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[TestResult]
--
PRINT (N'Create foreign key on table [dbo].[TestResult]')
GO
ALTER TABLE dbo.TestResult
  ADD FOREIGN KEY (DoctorID) REFERENCES dbo.Doctors (DoctorID)
GO

--
-- Create foreign key on table [dbo].[TestResult]
--
PRINT (N'Create foreign key on table [dbo].[TestResult]')
GO
ALTER TABLE dbo.TestResult
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[TestResult]
--
PRINT (N'Create foreign key on table [dbo].[TestResult]')
GO
ALTER TABLE dbo.TestResult
  ADD FOREIGN KEY (TestID) REFERENCES dbo.Tests (TestID)
GO

--
-- Create foreign key on table [dbo].[TestResult]
--
PRINT (N'Create foreign key on table [dbo].[TestResult]')
GO
ALTER TABLE dbo.TestResult
  ADD FOREIGN KEY (VisitsID) REFERENCES dbo.Visits (VisitsID)
GO

--
-- Create foreign key on table [dbo].[Images]
--
PRINT (N'Create foreign key on table [dbo].[Images]')
GO
ALTER TABLE dbo.Images
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[Images]
--
PRINT (N'Create foreign key on table [dbo].[Images]')
GO
ALTER TABLE dbo.Images
  ADD FOREIGN KEY (VisitsID) REFERENCES dbo.Visits (VisitsID)
GO

--
-- Create foreign key on table [dbo].[ImageingComment]
--
PRINT (N'Create foreign key on table [dbo].[ImageingComment]')
GO
ALTER TABLE dbo.ImageingComment
  ADD FOREIGN KEY (ImagesID) REFERENCES dbo.Images (ImagesID)
GO

--
-- Create foreign key on table [dbo].[FinancialTransaction]
--
PRINT (N'Create foreign key on table [dbo].[FinancialTransaction]')
GO
ALTER TABLE dbo.FinancialTransaction
  ADD FOREIGN KEY (VisitsID) REFERENCES dbo.Visits (VisitsID)
GO

--
-- Create foreign key on table [dbo].[Staff]
--
PRINT (N'Create foreign key on table [dbo].[Staff]')
GO
ALTER TABLE dbo.Staff
  ADD FOREIGN KEY (DepartmentID) REFERENCES dbo.Department (DepartmentID)
GO

--
-- Create foreign key on table [dbo].[StaffFeedback]
--
PRINT (N'Create foreign key on table [dbo].[StaffFeedback]')
GO
ALTER TABLE dbo.StaffFeedback
  ADD FOREIGN KEY (StaffID) REFERENCES dbo.Staff (StaffID)
GO

--
-- Create foreign key on table [dbo].[StaffBox]
--
PRINT (N'Create foreign key on table [dbo].[StaffBox]')
GO
ALTER TABLE dbo.StaffBox
  ADD FOREIGN KEY (StaffID) REFERENCES dbo.Staff (StaffID)
GO

--
-- Create foreign key on table [dbo].[JobInformation]
--
PRINT (N'Create foreign key on table [dbo].[JobInformation]')
GO
ALTER TABLE dbo.JobInformation
  ADD FOREIGN KEY (DepartmentID) REFERENCES dbo.Department (DepartmentID)
GO

--
-- Create foreign key on table [dbo].[JobInformation]
--
PRINT (N'Create foreign key on table [dbo].[JobInformation]')
GO
ALTER TABLE dbo.JobInformation
  ADD FOREIGN KEY (StaffID) REFERENCES dbo.Staff (StaffID)
GO

--
-- Create foreign key on table [dbo].[Inovices]
--
PRINT (N'Create foreign key on table [dbo].[Inovices]')
GO
ALTER TABLE dbo.Inovices
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[TaxInvoices]
--
PRINT (N'Create foreign key on table [dbo].[TaxInvoices]')
GO
ALTER TABLE dbo.TaxInvoices
  ADD FOREIGN KEY (InvoicesID) REFERENCES dbo.Inovices (InovicesID)
GO

--
-- Create foreign key on table [dbo].[PaidTaxes]
--
PRINT (N'Create foreign key on table [dbo].[PaidTaxes]')
GO
ALTER TABLE dbo.PaidTaxes
  ADD FOREIGN KEY (TaxInvoicesID) REFERENCES dbo.TaxInvoices (TaxInvoicesID)
GO

--
-- Create foreign key on table [dbo].[Payments]
--
PRINT (N'Create foreign key on table [dbo].[Payments]')
GO
ALTER TABLE dbo.Payments
  ADD FOREIGN KEY (InovicesID) REFERENCES dbo.Inovices (InovicesID)
GO

--
-- Create foreign key on table [dbo].[Payments]
--
PRINT (N'Create foreign key on table [dbo].[Payments]')
GO
ALTER TABLE dbo.Payments
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[MedicinesOutgoingInvoice]
--
PRINT (N'Create foreign key on table [dbo].[MedicinesOutgoingInvoice]')
GO
ALTER TABLE dbo.MedicinesOutgoingInvoice
  ADD FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO

--
-- Create foreign key on table [dbo].[MedicinesOutgoingInvoiceDetails]
--
PRINT (N'Create foreign key on table [dbo].[MedicinesOutgoingInvoiceDetails]')
GO
ALTER TABLE dbo.MedicinesOutgoingInvoiceDetails
  ADD FOREIGN KEY (InvoiceID) REFERENCES dbo.MedicinesOutgoingInvoice (InvoiceID)
GO

--
-- Create foreign key on table [dbo].[MedicinesOutgoingInvoiceDetails]
--
PRINT (N'Create foreign key on table [dbo].[MedicinesOutgoingInvoiceDetails]')
GO
ALTER TABLE dbo.MedicinesOutgoingInvoiceDetails
  ADD FOREIGN KEY (MedicinesID) REFERENCES dbo.Medicines (MedicinesID)
GO

--
-- Create foreign key on table [dbo].[UsersRoles]
--
PRINT (N'Create foreign key on table [dbo].[UsersRoles]')
GO
ALTER TABLE dbo.UsersRoles
  ADD FOREIGN KEY (RolesID) REFERENCES dbo.Roles (RolesID)
GO

--
-- Create foreign key on table [dbo].[UsersRoles]
--
PRINT (N'Create foreign key on table [dbo].[UsersRoles]')
GO
ALTER TABLE dbo.UsersRoles
  ADD FOREIGN KEY (UsersID) REFERENCES dbo.Users (UsersID)
GO

--
-- Create foreign key [FK_Appointment_Doctors] on table [dbo].[Appointment]
--
PRINT (N'Create foreign key [FK_Appointment_Doctors] on table [dbo].[Appointment]')
GO
ALTER TABLE dbo.Appointment
  ADD CONSTRAINT FK_Appointment_Doctors FOREIGN KEY (DoctorID) REFERENCES dbo.Doctors (DoctorID)
GO

--
-- Create foreign key [FK_Appointment_patients] on table [dbo].[Appointment]
--
PRINT (N'Create foreign key [FK_Appointment_patients] on table [dbo].[Appointment]')
GO
ALTER TABLE dbo.Appointment
  ADD CONSTRAINT FK_Appointment_patients FOREIGN KEY (PatinentID) REFERENCES dbo.patients (PatinentID)
GO
SET NOEXEC OFF
GO